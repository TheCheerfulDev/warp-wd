#!/bin/bash

reset='\033[0m'
lightblue='\033[1;36m'
yellow='\033[1;33m'
lightgreen='\033[1;32m'

WD_HOME="${HOME}/.wd"
WARP_DIR="${WD_HOME}/warps"

if [[ ! -d "${WD_HOME}" ]]; then
  mkdir "${WD_HOME}"
fi

if [[ ! -d "${WARP_DIR}" ]]; then
  mkdir "${WARP_DIR}"
fi

warp_to_dir() {
  if [[ -z $1 ]]; then
    print_usage
    return 0
  fi

  if [[ -f "${WARP_DIR}/$1" ]]; then
    cd "$(< "${WARP_DIR}/$1")" || return 1
    return 0
  fi
  echo -e " ${yellow}*${reset} Warp point ${yellow}$1${reset} doesn't exist."
  return 1
}

add_warp() {
  if [[ -z $1 ]]; then
    add_warp_pwd
    return 0
  fi

  if [[ ! -f "${WARP_DIR}/$1" ]]; then
    touch "${WARP_DIR}/$1"
    echo "${PWD}" > "${WARP_DIR}/$1"
    echo -e " ${lightgreen}*${reset} Warp point ${lightgreen}$1${reset} -> $(< "${WARP_DIR}/$1") has been added."
    return 0
  else
    echo -e " ${yellow}*${reset} Warp point ${yellow}$1${reset} already exists. Remove it before reassigning it."
    return 1
  fi
}

add_warp_pwd() {
  DIR_NAME="${PWD##*/}"
  if [[ ! -f "${WARP_DIR}/${PWD##*/}" ]]; then
    touch "${WARP_DIR}/${DIR_NAME}"
    echo "${PWD}" > "${WARP_DIR}/${DIR_NAME}"
    echo -e " ${lightgreen}*${reset} Warp point ${lightgreen}$DIR_NAME${reset} -> $(< "${WARP_DIR}/${DIR_NAME}") has been added."
    return 0
  else
    echo -e " ${yellow}*${reset} Warp point ${yellow}$DIR_NAME${reset} already exists. Remove it before reassigning it."
    return 1
  fi
}

remove_warp() {
  if [[ -z $1 ]]; then
    remove_warp_pwd
    return 0
  fi

  if [[ -f "${WARP_DIR}/$1" ]]; then
    CONTENT=$(< "${WARP_DIR}"/"$1")
    rm "${WARP_DIR}/$1"
    echo -e " ${lightgreen}*${reset} Warp point ${lightgreen}${1}${reset} -> ${CONTENT} has been removed."
    return 0
  else
    echo -e " ${yellow}*${reset} Warp point ${yellow}$1${reset} doesn't exist."
    return 1
  fi
}

remove_warp_pwd() {
  DIR_NAME="${PWD##*/}"
  if [[ -f "${WARP_DIR}/${PWD##*/}" ]]; then
    CONTENT=$(< "${WARP_DIR}/${DIR_NAME}")
    rm -f "${WARP_DIR}/${DIR_NAME}"
    echo -e " ${lightgreen}*${reset} Warp point ${lightgreen}$DIR_NAME${reset} -> ${CONTENT} has been removed."
    return 0
  else
    echo -e " ${yellow}*${reset} Warp point ${yellow}$DIR_NAME${reset} doesn't exist."
    return 1
  fi
}

show_warp() {
  if [[ -z $1 ]]; then
    show_warp_pwd
    return 0
  fi

  if [[ ! -f "${WARP_DIR}/$1" ]]; then
    echo -e " ${yellow}*${reset} Warp point ${yellow}$1${reset} doesn't exist."
    return 1
  fi

  echo -e " ${lightblue}*${reset} Warp point: ${lightgreen}$1${reset} -> $(< "${WARP_DIR}/$1")"
  return 0
}

show_warp_pwd() {
  if [[ -z "$(ls "${WARP_DIR}")" ]]; then
    echo -e " ${yellow}*${reset} No warp point to ${PWD}"
    return 0
  fi

  matching_warps=()

  for filename in "${WARP_DIR}"/*
  do
    if [[ ${PWD} == $(< "$filename") ]]; then
      matching_warps+=("$filename")
    fi
  done

  if [ ${#matching_warps[@]} -eq 0 ]; then
    echo -e " ${yellow}*${reset} No warp point to ${PWD}"
    return 0
  fi

  print_available_warp_points "" "${matching_warps[@]##*/}"
  return 0
}

function print_available_warp_points {
  local d=${1-} f=${2-}; if shift 2; then echo -e  " ${lightblue}*${reset} ${#matching_warps[@]} warp point(s) to current directory: ${lightgreen}${f}" "${@/#/$d}" "${reset}"; fi;
}


list_warps() {
  if [[ -z "$(ls "${WARP_DIR}")" ]]; then
    echo -e " ${yellow}*${reset} No warp points added yet."
    return 0
  fi

  echo -e " ${lightblue}*${reset} All warp points:"

  for filename in "${WARP_DIR}"/*
  do
    echo -e "${lightgreen}${filename##*/}${reset}  ->  $(< "$filename")"
  done
  return 0
}

ls_warp() {
  if [[ -z $1 ]]; then
    ls
    return 0
  fi

  if [[ ! -f "${WARP_DIR}/$1" ]]; then
    echo -e " ${yellow}*${reset} Warp point ${yellow}$1${reset} doesn't exist."
    return 1
  fi

  ls "$(< "${WARP_DIR}/$1")"
  return 0
}

path_warp() {
  if [[ -z $1 ]]; then
      pwd
      return 0
    fi

  if [[ ! -f "${WARP_DIR}/$1" ]]; then
    echo -e " ${yellow}*${reset} Warp point ${yellow}$1${reset} doesn't exist."
    return 1
  fi

  echo "$(< "${WARP_DIR}/$1")"
  return 0
}

clean_warp() {
  for filename in "${WARP_DIR}"/*
  do
    if [[ ! -d "$(< "$filename")" ]]; then
      echo -e " ${lightgreen}*${reset} Warp point ${lightgreen}${filename##*/}${reset} -> $(< "$filename") has been removed."
      rm -f "$filename"
    fi
  done
  return 0
}

print_usage() {
  echo "warp-wd 1.1 (c) TheCheerfulDev"
  echo "Usage: wd [command] <point>"
  echo ""
  echo "Commands:"
  echo "    <point>       Warps to the directory specified by the warp point"
  echo "    add <point>   Adds the current working directory to your warp points"
  echo "    add           Adds the current working directory to your warp points with current directory's name"
  echo "    rm <point>    Removes the given warp point"
  echo "    rm            Removes the given warp point with current directory's name"
  echo "    show <point>  Print path to given warp point"
  echo "    show          Print warp points to current directory"
  echo "    list          Print all stored warp points"
  echo "    ls <point>    Show files from given warp point (ls)"
  echo "    path <point>  Show the path to given warp point (pwd)"
  echo "    clean         Remove points warping to nonexistent directories"
  echo "    "
  echo "    help          Show this extremely helpful text"
  return 0
}

case "$1" in
  add)
    add_warp "$2"
    ;;
  rm)
    remove_warp "$2"
    ;;
  show)
    show_warp "$2"
    ;;
  list)
    list_warps
    ;;
  ls)
    ls_warp "$2"
    ;;
  path)
    path_warp "$2"
    ;;
  clean)
    clean_warp
    ;;
  help)
    print_usage
    ;;
  *)
    warp_to_dir "$1"
    ;;
esac
